{-# LANGUAGE MultiWayIf #-}
module Main where
currentTestCase = test8 -- Для изменения набора входных данных необходимо заменить значение здесь

test1 =
	[
		[10, 10, 5, 10, 10, 10, 12.23, 20.12],	--Строки с параметрами упаковок молока
		[5, 15, 20, 7, 8, 9, 43.28, 16.99]
	]

test2 =
	[
		[9, 21, 3, 22, 2, 2, 61.47, 19.67], 
		[2, 2, 28, 21, 7, 8, 14.10, 80.25], 
		[16, 4, 30, 18, 62, 2, 52.55, 72.18], 
		[2, 12, 8, 18, 16, 1, 3.67, 8.57], 
		[3, 86, 6, 17, 3, 37, 65.80, 69.04]
	]

test3 =
	[
		[1, 1, 1, 2, 2, 2, 0.59, 2.54],
		[1, 1, 1, 2, 2, 2, 0.65, 2.92],
		[1, 1, 1, 2, 2, 2, 0.35, 1.67],
		[1, 1, 1, 2, 2, 2, 0.39, 1.74],
		[1, 1, 1, 2, 2, 2, 0.52, 2.11]
	]

test4 =
	[
		[1, 1, 1, 2, 2, 2, 0.59, 2.54]
	]

test5 =
	[
		[1, 1, 1, 2, 2, 2, 0.28, 1.46],
		[1, 1, 1, 2, 2, 2, 0.28, 1.46],
		[1, 1, 1, 2, 2, 2, 0.28, 1.46],
		[1, 1, 1, 2, 2, 2, 0.28, 1.46],
		[1, 1, 1, 2, 2, 2, 0.29, 1.47]
	]

test6 =
	[
		[1, 1, 1, 100, 100, 100, 0.01, 840.00],
		[1, 1, 1, 100, 100, 100, 0.02, 260.00],
		[1, 1, 1, 100, 100, 100, 0.05, 820.00],
		[1, 1, 1, 100, 100, 100, 0.03, 560.00],
		[1, 1, 1, 100, 100, 100, 0.07, 1000.00]
	]

test7 =
	[
		[15, 8, 16, 6, 75, 1, 41.25, 26.33],
		[16, 19, 8, 12, 62, 1, 54.60, 29.49],
		[1, 20, 3, 11, 2, 95, 3.72, 93.64],
		[51, 6, 1, 10, 50, 1, 30.96, 48.41],
		[8, 18, 2, 4, 3, 81, 21.71, 66.84],
		[1, 26, 19, 54, 16, 4, 19.00, 69.86],
		[3, 6, 44, 11, 12, 14, 39.23, 52.61],
		[21, 2, 17, 38, 12, 16, 17.71, 98.54],
		[1, 35, 41, 49, 8, 11, 49.13, 56.07],
		[85, 20, 10, 28, 34, 25, 96.44, 94.58],
		[46, 57, 1, 6, 20, 39, 93.47, 62.41],
		[2, 53, 7, 14, 7, 4, 80.95, 35.49],
		[50, 24, 1, 41, 6, 18, 61.60, 68.51],
		[21, 8, 2, 21, 8, 6, 41.53, 78.21],
		[18, 61, 1, 8, 68, 7, 39.05, 57.26],
		[50, 7, 1, 8, 70, 1, 13.15, 20.74],
		[41, 15, 12, 26, 39, 14, 60.51, 97.64],
		[47, 17, 3, 53, 3, 12, 81.47, 67.30],
		[7, 19, 9, 4, 14, 33, 53.74, 93.64],
		[30, 5, 35, 37, 3, 42, 69.11, 86.45],
		[4, 87, 2, 19, 15, 9, 20.92, 30.79],
		[12, 6, 1, 7, 1, 59, 13.23, 70.62],
		[85, 2, 2, 2, 53, 1, 50.95, 21.47],
		[65, 2, 9, 4, 39, 38, 16.44, 44.81],
		[18, 21, 9, 16, 4, 63, 57.38, 83.64],
		[1, 3, 63, 49, 1, 12, 22.67, 61.59],
		[1, 42, 4, 1, 18, 39, 25.15, 98.60],
		[6, 47, 12, 16, 4, 28, 78.24, 49.98],
		[12, 24, 8, 15, 9, 1, 65.48, 13.36],
		[18, 4, 28, 28, 31, 1, 83.01, 49.62],
		[85, 9, 19, 1, 17, 100, 65.13, 41.03],
		[19, 4, 36, 15, 14, 13, 47.83, 31.97],
		[1, 8, 40, 72, 4, 2, 29.75, 38.87],
		[13, 12, 3, 2, 5, 1, 25.67, 1.76],
		[4, 17, 26, 10, 22, 5, 99.25, 61.68],
		[8, 16, 14, 1, 2, 27, 53.71, 8.52],
		[6, 2, 30, 1, 19, 15, 71.37, 79.68],
		[18, 5, 33, 27, 17, 5, 39.62, 31.44],
		[36, 13, 18, 28, 17, 20, 93.37, 97.44],
		[40, 52, 4, 88, 34, 1, 86.65, 75.83],
		[2, 22, 18, 1, 21, 19, 88.97, 64.34],
		[1, 15, 93, 6, 19, 33, 30.94, 21.15],
		[2, 6, 34, 24, 31, 17, 10.37, 93.44],
		[53, 5, 3, 1, 26, 9, 79.65, 40.78],
		[82, 5, 7, 4, 36, 31, 63.35, 91.29],
		[19, 4, 10, 28, 1, 40, 25.87, 91.19],
		[17, 2, 6, 5, 2, 12, 28.80, 17.40],
		[70, 2, 61, 6, 5, 89, 92.95, 20.90],
		[4, 8, 23, 7, 54, 1, 93.49, 70.48],
		[17, 17, 7, 10, 30, 22, 31.95, 81.57]
	]

test8 =
	[
		[20, 10, 90, 21, 43, 30, 93.88, 91.96],
		[28, 64, 12, 34, 6, 62, 58.78, 54.19],
		[12, 34, 12, 3, 15, 80, 95.64, 87.46],
		[10, 2, 65, 3, 8, 15, 71.78, 18.32],
		[3, 85, 8, 1, 80, 7, 78.51, 34.60],
		[19, 5, 6, 29, 1, 6, 45.93, 36.33],
		[16, 17, 2, 7, 32, 1, 84.89, 50.80],
		[3, 8, 11, 92, 3, 2, 17.26, 52.37],
		[3, 82, 3, 93, 6, 2, 37.16, 56.14],
		[5, 69, 2, 2, 4, 64, 82.60, 64.85],
		[35, 21, 8, 2, 44, 28, 91.57, 70.06],
		[1, 4, 92, 84, 26, 2, 11.13, 63.81],
		[18, 13, 16, 19, 24, 15, 56.19, 85.91],
		[5, 2, 14, 10, 1, 12, 17.21, 19.89],
		[36, 5, 7, 22, 11, 1, 26.13, 14.28],
		[95, 14, 3, 18, 66, 4, 89.70, 89.75],
		[21, 7, 11, 60, 9, 3, 42.30, 56.35],
		[11, 24, 1, 1, 85, 4, 17.19, 23.29],
		[73, 3, 3, 2, 33, 1, 38.61, 7.13],
		[7, 1, 55, 1, 42, 7, 83.69, 64.17],
		[5, 25, 7, 2, 12, 4, 58.23, 7.43],
		[56, 2, 32, 30, 10, 24, 69.86, 86.47],
		[1, 3, 20, 1, 31, 39, 5.65, 92.51],
		[13, 17, 19, 9, 1, 68, 58.12, 22.24],
		[4, 15, 25, 77, 21, 2, 28.59, 89.34],
		[1, 59, 21, 18, 2, 93, 63.35, 97.79],
		[59, 5, 9, 20, 9, 18, 55.62, 45.50],
		[39, 17, 4, 38, 22, 3, 65.50, 66.19],
		[8, 12, 5, 2, 9, 55, 13.19, 35.07],
		[49, 25, 2, 10, 41, 7, 71.57, 61.96],
		[97, 2, 6, 5, 5, 13, 89.99, 23.83],
		[42, 9, 2, 27, 1, 19, 81.61, 69.84],
		[19, 3, 70, 9, 8, 5, 69.30, 6.67],
		[4, 23, 7, 12, 3, 20, 39.40, 44.97],
		[1, 12, 40, 88, 9, 1, 39.96, 66.67],
		[8, 9, 5, 12, 24, 19, 11.50, 95.64],
		[1, 17, 22, 6, 8, 38, 16.85, 47.74],
		[5, 1, 4, 11, 11, 70, 1.05, 81.97],
		[10, 28, 1, 78, 2, 2, 37.08, 39.63],
		[89, 1, 5, 4, 2, 1, 92.35, 2.14],
		[2, 8, 4, 10, 3, 9, 10.37, 29.99],
		[21, 16, 9, 2, 88, 12, 59.12, 91.77],
		[24, 46, 4, 24, 6, 30, 67.06, 51.35],
		[41, 11, 42, 2, 31, 62, 86.28, 61.56],
		[24, 24, 2, 12, 97, 3, 18.24, 44.38],
		[4, 18, 5, 23, 21, 2, 27.38, 81.22],
		[6, 14, 19, 6, 4, 68, 68.61, 88.06],
		[59, 26, 13, 9, 41, 14, 97.50, 38.36],
		[36, 2, 26, 98, 4, 18, 26.89, 66.01],
		[27, 76, 19, 10, 67, 20, 96.55, 49.83],
		[9, 43, 53, 21, 17, 61, 83.56, 71.51],
		[47, 3, 18, 49, 43, 1, 85.03, 99.96],
		[1, 39, 2, 9, 21, 4, 27.14, 92.46],
		[17, 32, 7, 2, 50, 28, 57.91, 60.66],
		[6, 1, 54, 4, 40, 4, 85.25, 87.26],
		[1, 2, 20, 6, 2, 44, 4.52, 42.42],
		[26, 46, 20, 6, 55, 2, 97.97, 13.32],
		[12, 2, 44, 20, 16, 13, 24.01, 52.98],
		[17, 1, 25, 2, 26, 42, 14.97, 44.10],
		[21, 3, 64, 5, 98, 4, 54.87, 29.66],
		[16, 37, 2, 18, 8, 7, 66.55, 34.13],
		[1, 5, 87, 3, 27, 7, 88.19, 80.11],
		[21, 18, 8, 7, 10, 40, 99.66, 99.17],
		[15, 6, 22, 10, 52, 10, 39.81, 93.40],
		[23, 15, 18, 82, 3, 2, 87.84, 19.00],
		[39, 4, 26, 87, 5, 1, 83.17, 33.12],
		[3, 12, 13, 2, 31, 1, 65.68, 20.16],
		[2, 6, 36, 6, 64, 1, 69.35, 83.00],
		[17, 90, 1, 8, 14, 18, 61.61, 48.20],
		[32, 27, 6, 27, 6, 49, 60.23, 89.99],
		[1, 53, 6, 1, 8, 12, 12.35, 3.78],
		[12, 15, 6, 58, 1, 12, 44.50, 93.06],
		[22, 23, 48, 5, 11, 64, 88.51, 29.45],
		[4, 9, 25, 24, 11, 4, 69.21, 79.17],
		[6, 4, 62, 16, 2, 42, 94.59, 93.69],
		[27, 8, 6, 6, 26, 20, 41.72, 89.87],
		[13, 20, 24, 25, 21, 27, 23.89, 40.57],
		[75, 1, 59, 24, 13, 13, 94.68, 19.06],
		[49, 3, 9, 17, 2, 18, 72.73, 37.12],
		[6, 31, 37, 5, 98, 11, 77.64, 78.63],
		[97, 1, 4, 1, 43, 9, 78.59, 71.76],
		[5, 27, 6, 3, 9, 5, 77.87, 13.69],
		[24, 42, 33, 7, 28, 34, 80.79, 34.13],
		[4, 55, 1, 53, 1, 6, 38.64, 53.06],
		[6, 70, 6, 22, 20, 32, 30.45, 95.48],
		[5, 69, 4, 2, 24, 14, 17.92, 11.32],
		[94, 3, 31, 14, 8, 62, 76.20, 35.53],
		[86, 2, 4, 18, 2, 30, 60.30, 81.97],
		[20, 2, 33, 27, 23, 33, 21.02, 95.49],
		[6, 4, 20, 16, 78, 2, 12.60, 73.63],
		[21, 25, 1, 24, 2, 3, 51.11, 12.61],
		[3, 24, 6, 24, 7, 11, 18.31, 59.63],
		[31, 16, 7, 23, 10, 19, 63.53, 75.25],
		[3, 70, 1, 48, 2, 8, 39.08, 77.17],
		[1, 24, 4, 3, 11, 14, 14.42, 40.69],
		[28, 28, 2, 63, 2, 19, 52.24, 79.59],
		[1, 9, 48, 14, 4, 36, 36.72, 82.99],
		[3, 46, 8, 14, 35, 14, 29.75, 87.44],
		[43, 12, 2, 4, 15, 29, 91.82, 94.37],
		[54, 15, 2, 27, 21, 9, 43.94, 98.67]
	]

test9 =
	[
		[10, 10, 5, 10, 10, 10, 12.12, 18.18],
		[5, 15, 20, 7, 8, 9, 43.28, 16.99]
	]

findPackageUnitPrice :: [Double] -> Double
findPackageUnitPrice [x1, y1, z1, x2, y2, z2, packagePrice1, packagePrice2] = 
	(packagePrice2 * v1 - packagePrice1 * v2) / (s2 * v1 - s1 * v2)
	where
		v1 = x1 * y1 * z1
		v2 = x2 * y2 * z2
		s1 = x1*y1*2 + y1*z1*2 + z1*x1*2
		s2 = x2*y2*2 + y2*z2*2 + z2*x2*2

findMilkPrice [x1, y1, z1, x2, y2, z2, packagePrice1, packagePrice2] =
	(packagePrice1 - packageUnitPrice * s1) * 1000 / v1
	where
		s1 = x1*y1*2 + y1*z1*2 + z1*x1*2
		v1 = x1*y1*z1
		packageUnitPrice = findPackageUnitPrice [x1, y1, z1, x2, y2, z2, packagePrice1, packagePrice2]


getMilkPriceList :: [[Double]] -> [Double]
getMilkPriceList params = 
	if length params == 1
		then
			findMilkPrice (params !! 0) : []
		else
			findMilkPrice ((params !! 0)) : getMilkPriceList (tail params)

roundTo2 ::(RealFrac a) => a -> a
roundTo2 d = (fromIntegral . round $ (d * 100)) / 100

findCompany :: [Double] -> Int -> Double -> Int
findCompany prices currentPosition elem =
	if head prices == elem
		then 
			currentPosition
		else
			findCompany (tail prices) (currentPosition + 1) elem

getMinimalMilkPrice testCase= minimum . getMilkPriceList $ testCase

main = do 
	print  (findCompany (getMilkPriceList currentTestCase) 0 (getMinimalMilkPrice currentTestCase) + 1)
	print . roundTo2 . getMinimalMilkPrice $ currentTestCase 